version: 2.1
orbs:
  android: circleci/android@2.4.0
  codecov: codecov/codecov@3.3.0
jobs:
  unit-test:
    executor:
      name: android/android-docker
      tag: 2022.08.1
    steps:
      - checkout
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
            java -version
      - run:
          name: Reset JAVA_HOME to 17
          command: |
            sudo echo "export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> "$BASH_ENV"
            source "$BASH_ENV"
      - android/restore-gradle-cache
      - android/run-tests:
          test-command: ./gradlew jacocoTestReportDevDebug
      - android/save-gradle-cache
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results/junit
      - codecov/upload:
          file: jacocoTestReportDevDebug.xml
  android-test:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2022.08.1
    steps:
      - checkout
      - run:
          name: Install OpenJDK 17
          command: |
            sudo apt-get update && sudo apt-get install openjdk-17-jdk
            sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-17-openjdk-amd64/bin/javac
            java -version
      - run:
          name: Reset JAVA_HOME to 17
          command: |
            sudo echo "export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> "$BASH_ENV"
            source "$BASH_ENV"
      - run:
          name: Create avd
          command: |
            SYSTEM_IMAGES="system-images;android-29;default;x86"
            sdkmanager "$SYSTEM_IMAGES"
            echo "no" | avdmanager --verbose create avd -n test -k "$SYSTEM_IMAGES"
      - run:
          name: Launch emulator
          command: |
            emulator -avd test -delay-adb -verbose -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          background: true
      - run:
          name: Wait for emulator to start
          command: |
            circle-android wait-for-boot
      - run:
          name: Sleep for 30
          command: |
            sleep 30
      - run:
          name: Disable emulator animations
          command: |
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
      - run:
          name: Unlock Device
          command: |
            adb shell input keyevent 82
      - run:
          name: Generate cache key
          command: |
            find . -name 'build.gradle' | sort | xargs cat |
            shasum | awk '{print $1}' > /tmp/gradle_cache_seed
      - restore_cache:
          key: gradle-v1-{{ arch }}-{{ checksum "/tmp/gradle_cache_seed" }}
      - run:
          # run in parallel with the emulator starting up, to optimize build time
          name: Run assembleDebug task
          command: |
            ./gradlew assembleDebug
      - run:
          name: Save debug build
          command: |
            mkdir -p ~/app/build/
            find . -type f -regex ".*/app/build/outputs/apk/dev/debug/.*apk" -exec cp {} ~/app/build/ \;
          when: always
      - store_artifacts:
          path: ~/app/build
      - run:
          name: Run UI tests (with retry)
          command: |
            MAX_TRIES=2
            run_with_retry() {
               n=1
               until [ $n -gt $MAX_TRIES ]
               do
                  echo "Starting test attempt $n"
                  ./gradlew createDevDebugCoverageReport && break 
                  n=$[$n+1]
                  sleep 5
               done
               if [ $n -gt $MAX_TRIES ]; then
                 echo "Max tries reached ($MAX_TRIES)"
                 exit 1
               fi
            }
            run_with_retry
      - save_cache:
          key: gradle-v1-{{ arch }}-{{ checksum "/tmp/gradle_cache_seed" }}
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/androidTest/
            find . -type f -regex ".*/build/outputs/androidTest-results/.*xml" -exec cp {} ~/test-results/androidTest/ \;
          when: always
      - store_test_results:
          path: ~/test-results/androidTest
      - codecov/upload:
          file: app/build/reports/coverage/androidTest/dev/debug/connected/index.html #TODO figure out how to get xml instead of just html
workflows:
  test-and-build:
    jobs:
      - unit-test
      - android-test
